# -*- coding: utf-8 -*-
"""DSP Problem 2

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B201NkNcpBPEkUBYS0ggfAruRF_ENmwy
"""

# STEVEN CHU
# MICHAEL HAGGENMILLER

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

# Commented out IPython magic to ensure Python compatibility.
#%cd "/content/drive/My Drive/ECE113"
# update this as per your folder name
# %cd "/content/drive/My Drive/ECE 113 Project"
!pwd
!ls

"""Problem 2"""

# importing relevant libraries
from scipy.io import wavfile
from scipy import signal
from matplotlib import pyplot as plt
import numpy as np
import math

# update this with the path to inception folder
PATH = '/content/drive/My Drive/ECE 113 Project/inception_sound_track.wav'

# load in inception data
inception_fs, inception_data = wavfile.read(PATH)

######### Task 1 #########

# taking the initial DFT of one channel of the inception signal
inception_fft = np.fft.fft(inception_data[:,0])                     #part (a)
# taking the magnitude of the DFT
inception_fft_mag = abs(inception_fft)                              #part (b)
# initial placeholder for signal we will write to the new file
inception_data_new = inception_data[:,0]                              

# initialize a phase signal following normal distribution bounded at (0, 2*pi)
norm_dist = np.random.randn(inception_fft.size)+1                   #part (c)
dist = ((2 * math.pi) * (norm_dist +1)) % (2 * math.pi)     
dist = abs(dist)

# perform 100 iterations
for i in range(100):                                                #part(i)
  #combine original magnitude with generated phase
  dist = np.exp(1j * dist)
  inception_fft_2 = np.multiply(inception_fft_mag, dist)            #part(d)
  #take IDFT of newly combined Fourier Transform
  inception_data_ifft = np.fft.ifft(inception_fft_2)                #part(e)
  #take only real part of newly created signal
  inception_data_ifft = inception_data_ifft.real                    #part(f)
  #copy the signal over so we can write it to a file when the loop ends
  inception_data_new = inception_data_ifft
  #carry out DFT on new signal and take its phase
  inception_fft_2 = np.fft.fft(inception_data_ifft)
  dist = np.angle(inception_fft_2)                                  #part(g)                                

# write obtained signal to new wavfile
wavfile.write('/content/drive/My Drive/ECE 113 Project/inception_sound_track_new_fft.wav', inception_fs, inception_data_new)

######### Task 2 ##########

# taking the initial STFT of one channel of the inception signal
f, t, inception_stft = signal.stft(inception_data[:,0], fs=inception_fs, window='bartlett', nperseg=64, noverlap=32)
# taking the magnitude of the STFT
inception_stft_mag = abs(inception_stft)
# initial placeholder for signal we will write to the new file
inception_data_new = inception_data[:,0]

# generating a phase matrix with a normal distribution bounded by (0, 2*pi)
rows = int(inception_stft.size/inception_stft[0].size)
columns = inception_stft[0].size
normal_dist = abs(np.random.randn(rows, columns))+1
phase = ((2 * math.pi) * normal_dist) % (2*math.pi)

# taking phase of original STFT and generate empty list to store Frobenius norms
original_phase = np.angle(inception_stft)
frob_norms = list()

# perform 500 iterations
for i in range(500):
  #combine original magnitude with generated phase
  mult = np.exp(1j * phase)
  inception_stft_new = np.multiply(inception_stft_mag, mult)
  #take ISTFT of newly combined ST Fourier Transform
  f, inception_data_stft = signal.istft(inception_stft_new, fs=inception_fs, window='bartlett', nperseg=64, noverlap=32)
  #take only real part of newly created signal
  inception_data_stft = inception_data_stft.real
  #copy the signal over so we can write it to a file when the loop ends
  inception_data_new = inception_data_stft
  #carry out STFT on new signal and take its phase
  f, t, inception_stft_new = signal.stft(inception_data_stft, fs=inception_fs, window='bartlett', nperseg=64, noverlap=32)
  phase = np.angle(inception_stft_new)
  #on iterations 1, 50, 100, 250, and 500, take the Frobenius norm of the phase difference
  if i == 0 or i == 49 or i == 99 or i == 249 or i == 499:
    phase_diff = np.subtract(original_phase, phase)
    norm = np.linalg.norm(phase_diff)
    frob_norms.append(norm)

# write obtained signal to new wavfile
wavfile.write('/content/drive/My Drive/ECE 113 Project/inception_sound_track_new_stft1.wav', inception_fs, inception_data_new)

# plot the obtained Frobenius norms with respect to number of iterations
iterations = [1, 50, 100, 250, 500]
plt.plot(iterations, frob_norms)
plt.xlabel("Number of Iterations")
plt.ylabel("Frobenius Norm of Phase Difference")
plt.title("Frobenius Norm of Phase Difference vs. Number of Iterations")
plt.show()